# Generated by Django 4.2.7 on 2025-06-01 19:20

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nom', models.CharField(help_text="Nom de famille de l'utilisateur", max_length=50, verbose_name='Nom de famille')),
                ('prenom', models.CharField(blank=True, help_text="Prénom de l'utilisateur", max_length=50, verbose_name='Prénom')),
                ('email', models.EmailField(help_text='Adresse email (utilisée pour la connexion)', max_length=254, unique=True, verbose_name='Adresse email')),
                ('telephone', models.CharField(blank=True, help_text='Numéro de téléphone au format international', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Le numéro de téléphone doit être au format: '+999999999'. 15 chiffres maximum.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Téléphone')),
                ('role', models.CharField(choices=[('client', 'Client'), ('admin', 'Administrateur'), ('staff', 'Personnel')], default='client', help_text="Rôle de l'utilisateur dans le système", max_length=10, verbose_name='Rôle')),
                ('adresse', models.TextField(blank=True, help_text='Adresse de livraison ou de facturation', null=True, verbose_name='Adresse complète')),
                ('date_naissance', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('accepte_newsletter', models.BooleanField(default=False, verbose_name='Accepte la newsletter')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'utilisateur',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email'], name='utilisateur_email_5ac882_idx'), models.Index(fields=['role'], name='utilisateur_role_8f1c1b_idx'), models.Index(fields=['created_at'], name='utilisateur_created_27a4f0_idx')],
            },
        ),
    ]
